# -*- coding: utf-8 -*-
"""exe2julio.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SppKCqZg8MusIeHlOhouBBuACN91xQTV
"""

#  Classe Pessoa
class Pessoa:
    def __init__(self, nome, idade):
        self.nome = nome
        self.idade = idade

    def apresentar(self):
        print(f"Olá, meu nome é {self.nome} e tenho {self.idade} anos.")

# Classe Retângulo
class Retangulo:
    def __init__(self, largura, altura):
        self.largura = largura
        self.altura = altura

    def area(self):
        return self.largura * self.altura

    def perimetro(self):
        return 2 * (self.largura + self.altura)

#  Classe Círculo
import math
class Circulo:
    def __init__(self, raio):
        self.raio = raio

    def area(self):
        return math.pi * (self.raio ** 2)

    def circunferencia(self):
        return 2 * math.pi * self.raio

#  Classe Carro
class Carro:
    def __init__(self, marca, modelo, ano):
        self.marca = marca
        self.modelo = modelo
        self.ano = ano

    def descricao(self):
        print(f"{self.marca} {self.modelo} - {self.ano}")

#  Classe Livro
class Livro:
    def __init__(self, titulo, autor, ano):
        self.titulo = titulo
        self.autor = autor
        self.ano = ano

    def imprimir_dados(self):
        print(f"'{self.titulo}', de {self.autor} ({self.ano})")

#  Classe Aluno com Notas
class AlunoNotas:
    def __init__(self, nome):
        self.nome = nome
        self.notas = []

    def adicionar_nota(self, nota):
        self.notas.append(nota)

    def media(self):
        if not self.notas:
            return 0
        return sum(self.notas) / len(self.notas)

    def aprovado(self):
        return self.media() >= 6

#  Classe Produto
class Produto:
    def __init__(self, nome, preco, quantidade_estoque):
        self.nome = nome
        self.preco = preco
        self.quantidade_estoque = quantidade_estoque

    def vender(self, quantidade):
        if quantidade <= self.quantidade_estoque:
            self.quantidade_estoque -= quantidade
            print(f"Vendido {quantidade} unidades de {self.nome}")
        else:
            print("Estoque insuficiente")

    def repor(self, quantidade):
        self.quantidade_estoque += quantidade

    def aplicar_desconto(self, percentual):
        desconto = self.preco * percentual / 100
        self.preco -= desconto
        if self.preco < 0:
            self.preco = 0

#  Classe ContaBancaria
class ContaBancaria:
    def __init__(self):
        self.saldo = 0

    def depositar(self, valor):
        self.saldo += valor

    def sacar(self, valor):
        if valor <= self.saldo:
            self.saldo -= valor
        else:
            print("Saldo insuficiente")

    def extrato(self):
        print(f"Saldo atual: R$ {self.saldo:.2f}")

#  Classe Elevador
class Elevador:
    def __init__(self, total_andares, capacidade):
        self.andar_atual = 0
        self.total_andares = total_andares
        self.capacidade = capacidade
        self.pessoas = 0

    def subir(self):
        if self.andar_atual < self.total_andares:
            self.andar_atual += 1

    def descer(self):
        if self.andar_atual > 0:
            self.andar_atual -= 1

    def entrar(self):
        if self.pessoas < self.capacidade:
            self.pessoas += 1

    def sair(self):
        if self.pessoas > 0:
            self.pessoas -= 1

# Classe Agenda
class Agenda:
    def __init__(self):
        self.contatos = {}

    def adicionar(self, nome, telefone):
        self.contatos[nome] = telefone

    def listar(self):
        for nome, telefone in self.contatos.items():
            print(f"{nome}: {telefone}")

    def buscar(self, nome):
        return self.contatos.get(nome, "Contato não encontrado")

# Classe Pedido com Itens
class Pedido:
    def __init__(self):
        self.itens = []

    def adicionar_produto(self, produto, quantidade):
        self.itens.append((produto, quantidade))

    def valor_total(self):
        total = 0
        for produto, quantidade in self.itens:
            total += produto.preco * quantidade
        return total

# Classe Funcionario com Aumento Salarial
class Funcionario:
    def __init__(self, nome, salario):
        self.nome = nome
        self.salario = salario

    def aplicar_aumento(self, percentual):
        self.salario += self.salario * percentual / 100

# Classe Lista Encadeada Dupla
class NodoDuplo:
    def __init__(self, valor):
        self.valor = valor
        self.proximo = None
        self.anterior = None

class ListaEncadeadaDupla:
    def __init__(self):
        self.cabeca = None
        self.cauda = None

    def adicionar_fim(self, valor):
        novo = NodoDuplo(valor)
        if not self.cabeca:
            self.cabeca = self.cauda = novo
        else:
            self.cauda.proximo = novo
            novo.anterior = self.cauda
            self.cauda = novo

    def adicionar_inicio(self, valor):
        novo = NodoDuplo(valor)
        if not self.cabeca:
            self.cabeca = self.cauda = novo
        else:
            novo.proximo = self.cabeca
            self.cabeca.anterior = novo
            self.cabeca = novo

    def remover_fim(self):
        if not self.cauda:
            return None
        valor = self.cauda.valor
        if self.cauda.anterior:
            self.cauda = self.cauda.anterior
            self.cauda.proximo = None
        else:
            self.cabeca = self.cauda = None
        return valor

    def remover_inicio(self):
        if not self.cabeca:
            return None
        valor = self.cabeca.valor
        if self.cabeca.proximo:
            self.cabeca = self.cabeca.proximo
            self.cabeca.anterior = None
        else:
            self.cabeca = self.cauda = None
        return valor

# ContaBancaria com saldo privado e controle de saque
class ContaBancariaPrivada:
    def __init__(self):
        self.__saldo = 0

    def depositar(self, valor):
        self.__saldo += valor

    def sacar(self, valor):
        if valor <= self.__saldo:
            self.__saldo -= valor
        else:
            print("Saldo insuficiente")

    def extrato(self):
        print(f"Saldo atual: R$ {self.__saldo:.2f}")

# Classe Aluno com atributos privados e getters/setters
class AlunoPrivado:
    def __init__(self, nome, nota1, nota2):
        self.__nome = nome
        self.__nota1 = nota1
        self.__nota2 = nota2

    def media(self):
        return (self.__nota1 + self.__nota2) / 2

    def get_nome(self):
        return self.__nome

    def set_nome(self, nome):
        self.__nome = nome

    def get_nota1(self):
        return self.__nota1

    def set_nota1(self, nota):
        self.__nota1 = nota

    def get_nota2(self):
        return self.__nota2

    def set_nota2(self, nota):
        self.__nota2 = nota

# ContaBancaria com encapsulamento e mensagem de erro no saque
class ContaBancariaEncapsulada:
    def __init__(self):
        self.__saldo = 0

    def depositar(self, valor):
        if valor > 0:
            self.__saldo += valor

    def sacar(self, valor):
        if valor > self.__saldo:
            print("Erro: saldo insuficiente")
        elif valor <= 0:
            print("Erro: valor inválido para saque")
        else:
            self.__saldo -= valor

    def extrato(self):
        print(f"Saldo: R$ {self.__saldo:.2f}")

# Produto com atributos privados e desconto sem preço negativo
class ProdutoPrivado:
    def __init__(self, nome, preco):
        self.__nome = nome
        self.__preco = preco

    def aplicar_desconto(self, percentual):
        desconto = self.__preco * percentual / 100
        novo_preco = self.__preco - desconto
        if novo_preco < 0:
            self.__preco = 0
        else:
            self.__preco = novo_preco

    def get_preco(self):
        return self.__preco

    def get_nome(self):
        return self.__nome

# Classe Temperatura com conversão Celsius-Fahrenheit
class Temperatura:
    def __init__(self, celsius):
        self._celsius = celsius

    def get_fahrenheit(self):
        return (self._celsius * 9/5) + 32

    def set_fahrenheit(self, fahrenheit):
        self._celsius = (fahrenheit - 32) * 5/9

# Classe base Veiculo e classes filhas
class Veiculo:
    def __init__(self, marca, modelo):
        self.marca = marca
        self.modelo = modelo

    def exibir_info(self):
        print(f"Marca: {self.marca}, Modelo: {self.modelo}")

class CarroVeiculo(Veiculo):
    pass

class Moto(Veiculo):
    pass

# Método ligar() nas classes Carro e Moto
class CarroVeiculoLigado(Veiculo):
    def ligar(self):
        print("Carro ligado. Vamos acelerar!")

class MotoLigada(Veiculo):
    def ligar(self):
        print("Moto ligada. Vrum vrum!")

# Funcionario, Gerente e Vendedor com herança
class FuncionarioSimples:
    def __init__(self, nome, salario):
        self.nome = nome
        self.salario = salario

    def exibir_info(self):
        print(f"Nome: {self.nome}, Salário: {self.salario}")

class Gerente(FuncionarioSimples):
    def __init__(self, nome, salario, departamento):
        super().__init__(nome, salario)
        self.departamento = departamento

    def exibir_info(self):
        super().exibir_info()
        print(f"Departamento: {self.departamento}")

class Vendedor(FuncionarioSimples):
    def __init__(self, nome, salario, comissao):
        super().__init__(nome, salario)
        self.comissao = comissao

    def exibir_info(self):
        super().exibir_info()
        print(f"Comissão: {self.comissao}")

# Classe Animal com método falar e subclasses
class Animal:
    def falar(self):
        print("Animal fazendo som")

class Cachorro(Animal):
    def falar(self):
        print("Au au!")

class Gato(Animal):
    def falar(self):
        print("Miau!")

# Função fazer_som
class Passaro(Animal):
    def falar(self):
        print("Piu piu!")

def fazer_som(animal):
    animal.falar()